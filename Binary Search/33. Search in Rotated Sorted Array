class Solution {
    public int search(int[] nums, int target) {

        int l=0,r=nums.length-1,mid;

        while(l<=r)
        {
            mid=(l+r)/2;
            if(nums[mid]==target)
                return mid;
            //There can be two types of arrays, "left"" sub array - Example: 4 5 6 7 0 1 2, where the order is a bit distorted, or a "right"" subarray - Example: 7 0 1 2 4 5 6.
        //First lets find out which one we are in:
        if(nums[mid]>=nums[l])
        {
            //Now we need to check which direction / sub component we need to check to find the target
            // If greater than mid or lesser than start we know its located on the left of mid
            if(target>nums[mid] || target<nums[l])
                l=mid+1;
            else
                r=mid-1;
        }
        else //7 0 1 2 4 5 6
        {
            if(target<nums[mid] || target>nums[r])
                r=mid-1;
            else
                l=mid+1;
        }

        }
        return -1;
    }
}